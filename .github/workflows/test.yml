# Test workflow - Runs automated tests on pull requests
# This workflow ensures code quality by running tests before merging to main
name: Test

# Trigger: Run on pull requests targeting the main branch
on:
  pull_request:
    branches: [main]
  push:
    branches:
      - feature/devops-rael

jobs:
  test-docker:
    # Use the latest Ubuntu runner for consistent test environment
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code including PR changes
      - uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for Docker operations
      # Required for building and running Docker containers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Create .env file
      - name: Create .env file from secrets
        run: |
          cat > .env << 'EOF'
          # Database Configuration
          DB_URL=jdbc:mysql://db:3306/mtgbackend?createDatabaseIfNotExist=true
          SERVER_PORT=8080

        # Backend Database Credentials
          DB_USERNAME=${{ secrets.DB_USERNAME || 'root' }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD || 'root' }}
          
        # Docker MySQL Configuration  
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD || 'root' }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE || 'mtgbackend' }}
          MYSQL_USER=${{ secrets.MYSQL_USER || 'mtguser' }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD || 'mtgpass' }}
          
        # Cloudinary Configuration
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME || 'mtgbackend' }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY || 'root' }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET || 'root-root' }}
          
        # Email Notifications
          EMAIL=${{ secrets.EMAIL || 'mtg.backend@gmail.com' }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD || 'root' }}
          EOF

      # Step 4: Execute the test suite using docker-compose
      # Runs tests in isolated H2 environment (no MySQL needed)
      - name: Run tests with docker-compose
        run: docker compose -f docker-compose-test.yml up --quiet-pull --abort-on-container-exit --exit-code-from tests
        # --quiet-pull: Reduce output noise during image pulls
        # --abort-on-container-exit: Stop all containers when any container exits
        # --exit-code-from: Use exit code from specified container (tests)

      # Step 5: Clean up Docker resources
      # Always runs regardless of test results to prevent resource leaks
      - name: Clean up
        if: always()  # Run even if previous steps fail
        run: docker compose -f docker-compose-test.yml down -v
        # -v: Remove associated volumes